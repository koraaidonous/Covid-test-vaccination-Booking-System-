# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import clinic_control_pb2 as clinic__control__pb2


class ClinicCtrlStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getVacHistory = channel.unary_unary(
                '/ClinicCtrl/getVacHistory',
                request_serializer=clinic__control__pb2.vacRequest.SerializeToString,
                response_deserializer=clinic__control__pb2.vacFile.FromString,
                )
        self.getAppointment = channel.unary_unary(
                '/ClinicCtrl/getAppointment',
                request_serializer=clinic__control__pb2.appointmentRequest.SerializeToString,
                response_deserializer=clinic__control__pb2.appointmentFile.FromString,
                )
        self.getCovidResults = channel.unary_unary(
                '/ClinicCtrl/getCovidResults',
                request_serializer=clinic__control__pb2.resultsRequest.SerializeToString,
                response_deserializer=clinic__control__pb2.resultsFile.FromString,
                )


class ClinicCtrlServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getVacHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAppointment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCovidResults(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClinicCtrlServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getVacHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.getVacHistory,
                    request_deserializer=clinic__control__pb2.vacRequest.FromString,
                    response_serializer=clinic__control__pb2.vacFile.SerializeToString,
            ),
            'getAppointment': grpc.unary_unary_rpc_method_handler(
                    servicer.getAppointment,
                    request_deserializer=clinic__control__pb2.appointmentRequest.FromString,
                    response_serializer=clinic__control__pb2.appointmentFile.SerializeToString,
            ),
            'getCovidResults': grpc.unary_unary_rpc_method_handler(
                    servicer.getCovidResults,
                    request_deserializer=clinic__control__pb2.resultsRequest.FromString,
                    response_serializer=clinic__control__pb2.resultsFile.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ClinicCtrl', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ClinicCtrl(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getVacHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClinicCtrl/getVacHistory',
            clinic__control__pb2.vacRequest.SerializeToString,
            clinic__control__pb2.vacFile.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getAppointment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClinicCtrl/getAppointment',
            clinic__control__pb2.appointmentRequest.SerializeToString,
            clinic__control__pb2.appointmentFile.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getCovidResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClinicCtrl/getCovidResults',
            clinic__control__pb2.resultsRequest.SerializeToString,
            clinic__control__pb2.resultsFile.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
